

library(survey)

library(sqldf)



# /****************************************************************************************/
# /* This syntax can be used for creating OVAM weights for prevalence calculation using NCVS data
# /* This SAS program uses the NCVS concatenated incident (38604-0003-Data), person (38604-0002-Data), and
# /* household files(38604-0001-Data downloaded from NACJD. 
# /*Your data may have different names;
# /* The code will create the dataset "per4" which includes weights created using the one 
# /* victimization adjustment method (OVAM)
# /* The OVAM weights are called "prev_wgt" in the per4 data set. 
# /*per4 can be merged with the dataset(s) of interest for creating prevalance estiamtes	*/
# /* For more information on creating and using OVAM weights, see 
# /* for more informaiton on the NCVS, see 												*/
# /* https://bjs.ojp.gov/sites/g/files/xyckuh236/files/media/document/ncvstd16.pdf 		*/
# /* For additional questions, contact AskBJS@usdoj.gov              						*/
# /****************************************************************************************/


# fails with a gap, like Residue (98)

# icpsr_factor <-
	# function( this_column ){
		# these_labels <- sort( unique( as.character( this_column ) ) )
		
		# these_levels <- as.numeric( gsub( "^\\(([0-9]+)\\) (.*)" , "\\1" , these_labels ) )
	
		# these_values <- as.numeric( gsub( "^\\(([0-9]+)\\) (.*)" , "\\1" , this_column ) )
	
		# factor(
			# these_values ,
			# levels = these_levels ,
			# labels = these_labels
		# )
	# }




icpsr_numeric <- function( this_column ) as.numeric( gsub( "^\\(([0-9]+)\\) (.*)" , "\\1" , this_column ) )


# %let minyear=1993; 
# %let maxyear=9999;

# /* Import the data downloaded from NACJD, update file path to your location;*/
# proc cimport

   # infile="C:\ICPSR_38604\DS0001\38604-0001-Data.stc" lib=WORK;

# run;

load( "C:/Users/anthonyd/Desktop/ICPSR_38604-V1/ICPSR_38604/DS0001/38604-0001-Data.rda" )
hhld_df <- get( "da38604.0001" )
names( hhld_df ) <- tolower( names( hhld_df ) )



 # proc cimport

   # infile="C:\ICPSR_38604\DS0002\38604-0002-Data.stc" lib=WORK;

# run;

load( "C:/Users/anthonyd/Desktop/ICPSR_38604-V1/ICPSR_38604/DS0002/38604-0002-Data.rda" )
person_df <- get( "da38604.0002" )
names( person_df ) <- tolower( names( person_df ) )



 # proc cimport

   # infile="C:\ICPSR_38604\DS0003\38604-0003-Data.stc" lib=WORK;

# run;


load( "C:/Users/anthonyd/Desktop/ICPSR_38604-V1/ICPSR_38604/DS0003/38604-0003-Data.rda" )

incident_df <- get( "da38604.0003" )
names( incident_df ) <- tolower( names( incident_df ) )





# *Assign libraries;
# libname mysas 'C:\NCVS data\Output';
# run;

# data person ;

	# set work.Da38604p2(keep=year yearq v3018 v3014 SC214A v3023: v3024: v2117 v2118 v3002 idhh idper wgtpercy v3015 );

	# where 1993 <= year <= 2022;

	# if 1992 le year le 1996 then yr_grp=1;
	# else if 1997 le year le 2005 then yr_grp=2;
	# else if 2006 le year le 2015 then yr_grp=3;
	# else if 2016 le year then yr_grp=4;

	# pseudostrata=v2117;
	# halfsample=v2118;

# run;

person_df <-
	person_df[ person_df[ , 'year' ] %in% 1993:2022 , c( 'year' , 'yearq' , 'v3018' , 'v3014' , 'sc214a' , 'v3023' , 'v3023a' , 'v3024' , 'v3024a' , 'v2117' , 'v2118' , 'v3002' , 'idhh' , 'idper' , 'wgtpercy' , 'v3015' ) ]


person_df[ c( 'idhh' , 'idper' ) ] <-
	sapply( person_df[ c( 'idhh' , 'idper' ) ] , as.character )

person_df[ sapply( person_df , class ) == 'factor' ] <-
	sapply( 
		person_df[ sapply( person_df , class ) == 'factor' ] , 
		icpsr_numeric ,
		simplify = FALSE
	)


person_df <-
	transform(
		person_df ,
		yr_grp = findInterval( year , c( 1992 , 1997 , 2006 , 2016 ) ) ,
		pseudostrata = v2117 ,
		halfsample = v2118
	)




# data hhld;

	# set work.Da38604p1(keep=year yearq idhh wgthhcy  v2002 sc214a V2026 v2126a 
					   # v2126b V2015 V2017 v2117 v2118 v2125 V2071 V2072 V2127B v2129);
	# where 1993 <= year <= 2022;

 	# if 1992 le year le 1996 then yr_grp=1;
	# else if 1997 le year le 2005 then yr_grp=2;
	# else if 2006 le year le 2015 then yr_grp=3;
	# else if 2016 le year then yr_grp=4;

	# pseudostrata=v2117;
	# halfsample=v2118;
# run;

hhld_df <-
	hhld_df[ hhld_df[ , 'year' ] %in% 1993:2022 , c( 'year' , 'yearq' , 'idhh' , 'wgthhcy' , 'v2002' , 'sc214a' , 'v2026' , 'v2126a' , 'v2126b' , 'v2015' , 'v2017' , 'v2117' , 'v2118' , 'v2125' , 'v2071' , 'v2072' , 'v2127b' , 'v2129' ) ]



hhld_df[ , 'idhh' ] <- as.character( hhld_df[ , 'idhh' ] )

hhld_df[ sapply( hhld_df , class ) == 'factor' ] <-
	sapply( 
		hhld_df[ sapply( hhld_df , class ) == 'factor' ] , 
		icpsr_numeric , 
		simplify = FALSE 
	)



hhld_df <-
	transform(
		hhld_df ,
		yr_grp = findInterval( year , c( 1992 , 1997 , 2006 , 2016 ) ) ,
		pseudostrata = v2117 ,
		halfsample = v2118
	)
	


# data incident;
 # set work.Da38604p3 (keep=year yearq v2117 v2118 v4529 v4022 v4016-v4019 v4399 v4529 v4049 v4050-v4058
		# v4060 v4062 v4111-v4122 v4064 v4127-v4137 V4467 v4234 v4245 v4243 v4241 v4256 v4258 v4278 v4262
		# v4259-v4261 v4269 v4270 v4268 v4267 v4271 v4266 v4265 wgtviccy idhh idper V4002 v4288 v4290
        # v4400 v4437 v4422 v4024)
	# ; 

# **Create type of crime variables;
# where 1993 <= year <= 2022;


incident_df <-
	incident_df[ incident_df[ , 'year' ] %in% 1993:2022 , c( 'year' , 'yearq' , 'v2117' , 'v2118' , 'v4529' , 'v4022' , paste0( 'v401' , 6:9 ) , 'v4399' , 'v4529' , 'v4049' , paste0( 'v405' , 0:8 ) , 'v4060' , 'v4062' , paste0( 'v41' , 11:22 ) , 'v4064' , paste0( 'v41' , 27:37 ) , 'v4467' , 'v4234' , 'v4245' , 'v4243' , 'v4241' , 'v4256' , 'v4258' , 'v4278' , 'v4262' , paste0( 'v42' , 59:61 ) , 'v4269' , 'v4270' , 'v4268' , 'v4267' , 'v4271' , 'v4266' , 'v4265' , 'wgtviccy' , 'idhh' , 'idper' , 'v4002' , 'v4288' , 'v4290' , 'v4400' , 'v4437' , 'v4422' , 'v4024' ) ]


incident_df[ c( 'idhh' , 'idper' ) ] <-
	sapply( incident_df[ c( 'idhh' , 'idper' ) ] , as.character )

incident_df[ sapply( incident_df , class ) == 'factor' ] <-
	sapply(
		incident_df[ sapply( incident_df , class ) == 'factor' ] , 
		icpsr_numeric ,
		simplify = FALSE 
	)



	# *Violent crimes;
     # RSA = (v4529 in (1, 2, 3, 4, 15, 16, 18, 19));
     # ROB = (5 <= v4529 <= 10);
     # AST = (v4529 in (11, 12, 13, 14, 17, 20));
     # SAST = (v4529 in (14, 17, 20));
     # AAST = (v4529 in (11, 12, 13));

incident_df[ , 'rsa' ] <- 
	as.numeric( incident_df[ , 'v4529' ] %in% c( 1:4 , 15 , 16 , 18 , 19 ) )
	
incident_df[ , 'rob' ] <- 
	as.numeric( incident_df[ , 'v4529' ] %in% 5:10 )
	
incident_df[ , 'ast' ] <- 
	as.numeric( incident_df[ , 'v4529' ] %in% c( 11:14 , 17 , 20 ) )

incident_df[ , 'sast' ] <- 
	as.numeric( incident_df[ , 'v4529' ] %in% c( 14 , 17 , 20 ) )

incident_df[ , 'aast' ] <- 
	as.numeric( incident_df[ , 'v4529' ] %in% 11:13 )


     # VIOLENT = (MAX(RSA,ROB,AST));
     # SVIOLENT = (MAX(RSA,ROB,AAST));

incident_df[ , 'violent' ] <-
	apply( incident_df[ c( 'rsa' , 'rob' , 'ast' ) ] , 1 , max )
	
incident_df[ , 'sviolent' ] <-
	apply( incident_df[ , c( 'rsa' , 'rob' , 'aast' ) ] , 1 , max )
	
     # *Personal theft;
     # PTFT = (21 <= v4529 <= 23);

incident_df[ , 'ptft' ] <- 
	as.numeric( incident_df[ , 'v4529' ] %in% 21:23 )


     # PERSONCRIME=max(VIOLENT,PTFT);


incident_df[ , 'personcrime' ] <-
	apply( incident_df[ , c( 'violent' , 'ptft' ) ] , 1 , max )


     # *property crimes;

     # HHBURG = (31 <= v4529 <= 33);
		# burg_ct=((v4529 = 31 OR v4529 = 32 OR v4529 = 33) AND v4288 = 1);
		# burg_at=((v4529 = 31 OR v4529 = 32 OR v4529 = 33) AND  v4290 = 1);
		# burg_ncat=((v4529 = 31 OR v4529 = 32 OR v4529 = 33) AND (v4288 = 2 and v4290=2));
		
incident_df[ , 'hhburg' ] <-
	as.numeric( 
		( incident_df[ , 'v4529' ] %in% 31:33 )	
	)

incident_df[ , 'burg_ct' ] <-
	as.numeric( 
		( incident_df[ , 'v4529' ] %in% 31:33 ) &
		( incident_df[ , 'v4288' ] == 1 )
	)

incident_df[ , 'burg_at' ] <-
	as.numeric( 
		( incident_df[ , 'v4529' ] %in% 31:33 ) &
		( incident_df[ , 'v4290' ] == 1 )
	)

incident_df[ , 'burg_ncat' ] <-
	as.numeric( 
		( incident_df[ , 'v4529' ] %in% 31:33 ) &
		( incident_df[ , 'v4288' ] == 2 ) &
		( incident_df[ , 'v4290' ] == 2 )
	)



		# if (burg_ct= 1 or burg_at =1) then burgcats2=1;
		# else if (burg_ncat= 1) then burgcats2=2;
		# else burgcats2=0;

incident_df[ , 'burgcats2' ] <- 0
incident_df[ incident_df[ , 'burg_ncat' ] %in% 1 , 'burgcats2' ] <- 2
incident_df[ incident_df[ , 'burg_ct' ] %in% 1 | incident_df[ , 'burg_at' ] %in% 1 , 'burgcats2' ] <- 1
	

	
	
	 # BURG = (burgcats2=1);
	 # TRES = (burgcats2=2);
     # MVTFT = (v4529 in (40, 41));
     # HHTFT = (54 <= v4529 <= 59);
     # PROPERTY = (max(HHBURG, MVTFT, HHTFT));


incident_df[ , 'burg' ] <- as.numeric( incident_df[ , 'burgcats2' ] == 1 )
incident_df[ , 'tres' ] <- as.numeric( incident_df[ , 'burgcats2' ] == 2 )

incident_df[ , 'mvtft' ] <-
	as.numeric( incident_df[ , 'v4529' ] %in% 40:41 )

incident_df[ , 'hhtft' ] <-
	as.numeric( incident_df[ , 'v4529' ] %in% 54:59 )

incident_df[ , 'property' ] <-
	apply( incident_df[ c( 'hhburg' , 'mvtft' , 'hhtft' ) ] , 1 , max )
	

     # if (v4022 ne 1) then exclude_outUS=0; *exclude incidents occuring outside of the US;
     # else exclude_outUS=1;


incident_df[ , 'exclude_outus' ] <- as.numeric( incident_df[ , 'v4022' ] == 1 )



		 # if (v4017 in (1,8)) OR (v4018 in (2,8)) OR (v4019 in (1,8)) then series=1;
     # else series=2;

incident_df[ , 'series' ] <- 2

incident_df[ 

	incident_df[ , 'v4017' ] %in% c( 1 , 8 ) |
	incident_df[ , 'v4018' ] %in% c( 2 , 8 ) |
	incident_df[ , 'v4019' ] %in% c( 1 , 8 )

	, 'series' ] <- 1




	 # serieswgt=1;	
	 
incident_df[ , 'serieswgt' ] <- 1


     # **create temporary variable for alternative weight.;
     # if v4016 not in (997 998) then n10v4016=v4016;
     # if n10v4016>10 then n10v4016=10; 

incident_df[ !( incident_df[ , 'v4016' ] %in% 997:998 ) , 'n10v4016' ] <-
	pmin( incident_df[ !( incident_df[ , 'v4016' ] %in% 997:998 ) , 'v4016' ] , 10 )

     # if (series=2) then serieswgt=n10v4016;
	 
incident_df[ incident_df[ , 'series' ] == 2 , 'serieswgt' ] <-
	incident_df[ incident_df[ , 'series' ] == 2 , 'n10v4016' ]

     # if (series=2 and n10v4016=.) then serieswgt=6; 

incident_df[ incident_df[ , 'series' ] == 2 & is.na( incident_df[ , 'n10v4016' ] ) , 'serieswgt' ] <- 6

     # NEWWGT=WGTVICCY*serieswgt;

incident_df <-
	transform(
		incident_df ,
		newwgt = wgtviccy * serieswgt
	)
	
	

# ALL_ALL=1;

	# if 1992 le year le 1996 then yr_grp=1;
	# else if 1997 le year le 2005 then yr_grp=2;
	# else if 2006 le year le 2015 then yr_grp=3;
	# else if year >= 2016 then yr_grp=4;

	# pseudostrata=v2117; 
	# halfsample=v2118;
	
# run;



incident_df <-
	transform(
		incident_df ,
		all_all = 1 ,
		yr_grp = findInterval( year , c( 1992 , 1997 , 2006 , 2016 ) ) ,
		pseudostrata = v2117 ,
		halfsample = v2118
	)
	




# title "Check incident derived variables";
# proc freq data=incident;
# tables v4529*VIOLENT*RSA*ROB*AAST*SAST*SVIOLENT*PTFT*PROPERTY*HHBURG*BURG*TRES*MVTFT*HHTFT
# /list missing nocum nopercent;
# tables year*(VIOLENT RSA ROB AAST SAST SVIOLENT PTFT PROPERTY HHBURG BURG TRES MVTFT HHTFT
# )/nocol nopercent missing;
# run;

# table( incident_df[ c( 'year' , 'violent' ) ] , useNA = 'always' )

# table( incident_df[ c( 'year' , 'property' ) ] , useNA = 'always' )



# title "Preparing and merging data";
# *The next series of steps involve sorting and merging data to format it for creating weights ;



 # /*Create incident summaries to move on to person and HH files (HH-level) */
 # proc sort data=incident; by yearq idhh v4002; run;

 # proc means data = incident noprint;
    # by yearq idhh v4002;
    # where exclude_outUS = 0 and property = 1;
    # id WGTVICCY; *Keep weight var on file;
    # weight serieswgt;
    # var PROPERTY HHBURG MVTFT HHTFT BURG TRES;
    # output out = hh_sums(drop=_TYPE_ _FREQ_) sum=;
 # run;


# hh_sums <-
	# sqldf::sqldf(
		# "SELECT
			# yearq , idhh , v4002 , wgtviccy ,
			# ( property * serieswgt ) / serieswgt AS property ,
			# ( hhburg * serieswgt ) / serieswgt AS hhburg ,
			# ( mvtft * serieswgt ) / serieswgt AS mvtft ,
			# ( burg * serieswgt ) / serieswgt AS burg ,
			# ( tres * serieswgt ) / serieswgt AS tres
		# FROM
			# incident_df
		# WHERE
			# exclude_outus = 0 AND property = 1
		# GROUP BY
			# yearq , idhh , v4002 , wgtviccy"
	# )


hh_crimes <- c( 'property' , 'hhburg' , 'mvtft' , 'burg' , 'tres' )

hh_sums <-
	aggregate(
		cbind(
			property * serieswgt ,
			hhburg * serieswgt ,
			mvtft * serieswgt ,
			burg * serieswgt ,
			tres * serieswgt
		) ~ yearq + idhh + v4002 + wgtviccy ,
		
		data = subset( incident_df , exclude_outus == 0 & property == 1 ) ,
		
		sum
	)

names( hh_sums )[ seq( ncol( hh_sums ) - 4 , ncol( hh_sums ) ) ] <- hh_crimes


# not sure what this line does
#     id WGTVICCY; *Keep weight var on file;
# so make sure it doesn't affect the record count 	
stopifnot( nrow( hh_sums ) == nrow( unique( hh_sums[ c( 'yearq' , 'idhh' , 'v4002' ) ] ) ) )


	


 # proc sort data=incident; by yearq idhh v4002 idper; run;
# **Violent;
 # proc means data = incident noprint;
    # by yearq idhh v4002 idper;
    # where exclude_outUS = 0 and PERSONCRIME = 1;
    # id WGTVICCY;
    # weight serieswgt;
    # var VIOLENT SVIOLENT RSA ROB AAST SAST PTFT ;
      # ;
    # output out = per_sums(drop=_TYPE_ _FREQ_) sum=;
 # run;



# per_sums <-
	# sqldf::sqldf(
		# "SELECT
			# yearq , idhh , v4002 , idper , wgtviccy ,
			# ( violent * serieswgt ) / serieswgt AS violent ,
			# ( sviolent * serieswgt ) / serieswgt AS sviolent ,
			# ( rsa * serieswgt ) / serieswgt AS rsa ,
			# ( rob * serieswgt ) / serieswgt AS rob ,
			# ( aast * serieswgt ) / serieswgt AS aast ,
			# ( sast * serieswgt ) / serieswgt AS sast ,
			# ( ptft * serieswgt ) / serieswgt AS ptft
		# FROM
			# incident_df
		# WHERE
			# exclude_outus = 0 AND personcrime = 1
		# GROUP BY
			# yearq , idhh , v4002 , idper , wgtviccy"
	# )


person_crimes <- c( 'violent' , 'sviolent' , 'rsa' , 'rob' , 'aast' , 'sast' , 'ptft' )


per_sums <-
	aggregate(
		cbind(
			violent * serieswgt ,
			sviolent * serieswgt ,
			rsa * serieswgt ,
			rob * serieswgt ,
			aast * serieswgt ,
			sast * serieswgt ,
			ptft * serieswgt
		) ~ yearq + idhh + v4002 + idper + wgtviccy ,
		
		data = subset( incident_df , exclude_outus == 0 & personcrime == 1 ) ,
		
		sum
	)
	


names( per_sums )[ seq( ncol( per_sums ) - 6 , ncol( per_sums ) ) ] <-
	person_crimes
	
	
	
# not sure what this line does
#     id WGTVICCY; *Keep weight var on file;
# so make sure it doesn't affect the record count 	
stopifnot( nrow( per_sums ) == nrow( unique( per_sums[ c( 'yearq' , 'idhh' , 'v4002' , 'idper' ) ] ) ) )






# /* Merge on household incident summary to household file */
 # proc sort data=hhld; by yearq idhh v2002; run;

 # data hhld_final;
  # merge hhld(in=in1) hh_sums (rename=(v4002=v2002)); 
	# by yearq idhh v2002;
  # if in1;

	  # array crimes{*} PROPERTY HHBURG MVTFT HHTFT BURG TRES;
    # do i=1 to dim(crimes);
        # if crimes[i]=. then crimes[i]=0;
    # end;
 
  # if WGTVICCY>0 then ADJINC_WT=WGTVICCY/WGTHHCY;
  # else ADJINC_WT=0;

	# drop i;
	
 # run;
 

hhld_final_df <-
	merge(
		hhld_df ,
		hh_sums ,
		by.x = c( 'yearq' , 'idhh' , 'v2002' ) ,
		by.y = c( 'yearq' , 'idhh' , 'v4002' ) ,
		all.x = TRUE
	)
	
	
stopifnot( nrow( hhld_final_df ) == nrow( hhld_df ) )

for( this_crime in hh_crimes ){
	hhld_final_df[ is.na( hhld_final_df[ , this_crime ] ) , this_crime ] <- 0
}


hhld_final_df[ , 'adjinc_wt' ] <-
	pmax(
		hhld_final_df[ , 'wgtviccy' ] / hhld_final_df[ , 'wgthhcy' ] ,
		0 ,
		na.rm = TRUE
	)
	
	
	
 
 
 
 

# /* Merge on person incident summary to person file */
 # proc sort data=person; by yearq idhh v3002 idper; run;

 # data person_wincident;
 # merge person(in=in1) per_sums (rename=(v4002=v3002));
 # by yearq idhh v3002 idper;
 # if in1;

 # array crimes{*} VIOLENT RSA ROB AAST SAST SVIOLENT PTFT;
		

    # do i=1 to dim(crimes);
        # if crimes[i]=. then crimes[i]=0;
    # end;
 
  # if WGTVICCY>0 then ADJINC_WT=WGTVICCY/WGTPERCY;
  # else ADJINC_WT=0;

	# drop i;
# run;





person_wincident_df <-
	merge(
		person_df ,
		per_sums ,
		by.x = c( 'yearq' , 'idhh' , 'v3002' , 'idper' ) ,
		by.y = c( 'yearq' , 'idhh' , 'v4002' , 'idper' ) ,
		all.x = TRUE
	)
	
	
stopifnot( nrow( person_wincident_df ) == nrow( person_df ) )

for( this_crime in person_crimes ){
	person_wincident_df[ is.na( person_wincident_df[ , this_crime ] ) , this_crime ] <- 0
}


person_wincident_df[ , 'adjinc_wt' ] <-
	pmax(
		person_wincident_df[ , 'wgtviccy' ] / person_wincident_df[ , 'wgtpercy' ] ,
		0 ,
		na.rm = TRUE
	)
	




# /* Merge on household variables to person file */
# proc sort data=person_wincident;
# by yearq idhh v3002;
# run;
# proc sort data=HHLD_FINAL;
# by yearq idhh v2002;
# run;

# data person_final;
	# merge person_wincident (in=ki) 
		# HHLD_FINAL (keep=yearq idhh v2002 
					# rename=(v2002=v3002));
	# by yearq idhh v3002;
	# if ki;
# run;


person_final_df <-
	merge(
		person_wincident_df ,
		hhld_final_df[ c( 'yearq' , 'idhh' , 'v2002' ) ] ,
		by.x = c( 'yearq' , 'idhh' , 'v3002' ) ,
		by.y = c( 'yearq' , 'idhh' , 'v2002' ) ,
		all.x = TRUE
	)
	
stopifnot( nrow( person_final_df ) == nrow( person_wincident_df ) )



# proc sort data= incident ;
# by yearq idhh v4002 idper;
# run;
# proc sort data= person ;
# by yearq idhh v3002 idper;
# run;
# proc sort data=hhld ;
# by yearq idhh v2002;
# run;

# /* Merge on person variables to incident file*/
# data incident_wperson;
	# merge incident (in=ki) 
# person (keep=year yearq idhh idper v3002 rename=(v3002=v4002));
	# by yearq idhh v4002 idper;
	# if ki;
# run;




warning( "i assume the `year` does not belong in the keep= statement above" )
# > table(incident_wperson_df$year.y==incident_wperson_df$year.x,useNA='always')

  # TRUE   <NA> 
# 305120      0 


incident_wperson_df <-
	merge(
		incident_df ,
		person_df[ c( 'yearq' , 'idhh' , 'idper' , 'v3002' ) ] ,
		by.x = c( 'yearq' , 'idhh' , 'v4002' , 'idper' ) ,
		by.y = c( 'yearq' , 'idhh' , 'v3002' , 'idper' ) ,
		all.x = TRUE
	)
	
stopifnot( nrow( incident_wperson_df ) == nrow( incident_df ) )




# /* Merge on household variables to incident file*/
# data incident_whhld;
	# merge incident_wperson (in=ki) 
		# hhld (keep=yearq idhh v2002 rename=(v2002=v4002));
	# by yearq idhh v4002;
	# if ki;
# run;



incident_whhld_df <-
	merge(
		incident_wperson_df ,
		hhld_df[ c( 'yearq' , 'idhh' , 'v2002' ) ] ,
		by.x = c( 'yearq' , 'idhh' , 'v4002' ) ,
		by.y = c( 'yearq' , 'idhh' , 'v2002' ) ,
		all.x = TRUE
	)
	


stopifnot( nrow( incident_whhld_df ) == nrow( incident_wperson_df ) )





# proc sort data=work.incident_wperson (where=(1992 < year <&maxyear  )) out=inc0;
  # by idhh idper year yearq;
# run;

inc0_df <-
	incident_wperson_df[ 
		incident_wperson_df[ , 'year' ] > 1992 ,
	]
	


# proc sort data=work.person_final (where=(1992 < year <&maxyear )) OUT=person;
  # by idhh idper year yearq;
# run;


warning( 'this overwrites the prior person_df table' )

person_df <-
	person_final_df[
		person_final_df[ , 'year' ] > 1992 ,
	]



# data inc;
  # set inc0;

  # q=scan(strip(put(yearq,8.1)),2,".");

  # if ^missing(yearq) then do;
    # if q in ("1" "2") then H=1;
    # else if q in ("3" "4") then H=2;
  # end;

  # if exclude_outUS ne 1;

# run;


inc_df <-
	transform(
		subset( inc0_df , exclude_outus == 0 ) ,
		h =
			ifelse( substr( yearq , 6 , 6 ) %in% c( '1' , '2' ) , 1 ,
			ifelse( substr( yearq , 6 , 6 ) %in% c( '3' , '4' ) , 2 ,
				NA ) )
	)
	
stopifnot( all( inc_df[ , 'h' ] %in% c( 1 , 2 ) ) )


 # title "Create initial OVAM weights";
# *Assign an initial prev_wgt based on the number of interviews and victimizations;
# %macro loop(var);
# proc sql;
  # * Incidents by Q;
  # create table &var.Q as
    # select distinct idhh, idper, year, yearq, v4002, sum(&var.*serieswgt) as &var.
    # from inc where &var. > 0 group by idper, year, yearq, v4002;

  # * Incidents by Y;
  # create table &var.Y as 
    # select distinct idhh, idper, year, sum(&var.*serieswgt) as &var.y
    # from inc where &var. > 0 group by idper, year;

  # * VWGT by Half;
  # create table half_wts as 
    # select distinct idhh, idper, year, h, mean(wgtviccy) as WGTVICCY 
    # from inc where &var. > 0  group by idper, year, h;

  # * Interviews per Y;
  # create table interviews as 
    # select distinct idhh, idper, year, count(*) as intY
    # from person where wgtpercy > 0 group by idper, year;
# quit;


violentq_df <-
	sqldf(
		"SELECT
			idhh , idper , year , yearq , v4002 ,
			SUM( violent * serieswgt ) AS violent
		FROM
			inc_df
		WHERE
			violent > 0
		GROUP BY
			idper , year , yearq , v4002"
	)
	


violenty_df <-
	sqldf(
		"SELECT
			idhh , idper , year ,
			SUM( violent * serieswgt ) AS violenty
		FROM
			inc_df
		WHERE
			violent > 0
		GROUP BY
			idhh , idper , year"
	)
	

half_wts_df <-
	sqldf(
		"SELECT
			idhh , idper , year , h ,
			AVG( wgtviccy ) AS wgtviccy
		FROM
			inc_df
		WHERE
			violent > 0
		GROUP BY
			idhh , idper , year , h"
	)
	
interviews_df <-
	sqldf(
		"SELECT
			idhh , idper , year , COUNT(*) AS inty
		FROM
			person_df
		WHERE
			wgtpercy > 0
		GROUP BY
			idhh , idper , year"
	)
	
	








# proc transpose data=half_wts out=wgt_H (drop=_:)  prefix=VWGT;
  # by idhh idper  year;
  # id H;
  # var WGTVICCY;
# run;


left_h_df <-
	half_wts_df[ 
		half_wts_df[ , 'h' ] == 1 , 
		c( 'idhh' , 'idper' , 'year' , 'wgtviccy' )
	]
	
names( left_h_df )[ ncol( left_h_df ) ] <- 'vwgt1'
	
right_h_df <-
	half_wts_df[ 
		half_wts_df[ , 'h' ] == 2 , 
		c( 'idhh' , 'idper' , 'year' , 'wgtviccy' )
	]
	
	
names( right_h_df )[ ncol( right_h_df ) ] <- 'vwgt2'

wgt_h_df <- merge( left_h_df , right_h_df , all = TRUE )




# too slow
# wgt_h_df <-
	# reshape(
		# half_wts_df ,
		# idvar = c( 'idhh' , 'idper' , 'year' ) ,
		# timevar = 'h' ,
		# direction = 'wide'
	# )
	
		

# proc means data=inc (rename=(v4002=v3002)) noprint;
# by idhh idper year h v3002;
# where violent>0;
# output out=inch0 max(wgtviccy)=wgtviccy;
# run;


inch0_df <- 
	sqldf(
		"SELECT
			idhh , idper , year , h ,
			v4002 AS v3002 ,
			MAX( wgtviccy ) AS wgtviccy
		FROM
			inc_df
		WHERE
			violent > 0
		GROUP BY
			idhh , idper , year , h , v3002
		ORDER BY
			idhh , idper , year , h , v3002"
	)	



# data inch00;
	# set inch0;
	# by idhh idper year h ;
	# retain id;
	# if first.h then id=0;
	# id+1;

	# label=catx("_", h, id);
# run;


inch0_df[ , 'byvar' ] <-
	apply( inch0_df[ c( 'idhh' , 'idper' , 'year' , 'h' ) ] , 1 , paste , collapse = ' ' )
	
	
inch0_df[ 1 , 'id' ] <- 1

for( i in seq( 2 , nrow( inch0_df ) ) ){

	if( inch0_df[ i , 'byvar' ] == inch0_df[ i - 1 , 'byvar' ] ){
	
		inch0_df[ i , 'id' ] <- inch0_df[ i - 1 , 'id' ] + 1
		
	} else {
	
		inch0_df[ i , 'id' ] <- 1
		
	}
}

inch0_df[ , 'label' ] <- paste0( '_' , inch0_df[ , 'h' ] , '_' , inch0_df[ , 'id' ] )

inch0_df[ , 'byvar' ] <- NULL



# proc transpose data=inch00 out=inc_h (drop=_:)  prefix=WgtViccy_;
  # by idhh idper  year;
  # id label;
  # var wgtviccy;
# run;


stopifnot( all( inch0_df[ , 'label' ] %in% c( '_1_1' , '_2_1' , '_1_2' ) ) )

h_1_1_df <-
	inch0_df[ 
		inch0_df[ , 'label' ] == '_1_1' , 
		c( 'idhh' , 'idper' , 'year' , 'wgtviccy' )
	]
	
names( h_1_1_df )[ ncol( h_1_1_df ) ] <- 'wgtviccy_1_1'
	
	
h_2_1_df <-
	inch0_df[ 
		inch0_df[ , 'label' ] == '_2_1' , 
		c( 'idhh' , 'idper' , 'year' , 'wgtviccy' )
	]
	
names( h_2_1_df )[ ncol( h_2_1_df ) ] <- 'wgtviccy_2_1'
	
	
h_1_2_df <-
	inch0_df[ 
		inch0_df[ , 'label' ] == '_1_2' , 
		c( 'idhh' , 'idper' , 'year' , 'wgtviccy' )
	]
	
names( h_1_2_df )[ ncol( h_1_2_df ) ] <- 'wgtviccy_1_2'
	
	
warning( 'there is a better way to merge three dfs' )

inc_h_df <- 
	merge( merge( h_1_1_df , h_2_1_df , all = TRUE ) , h_1_2_df , all = TRUE )
	


# * row per person per Q;
# data per1;
  # merge person /*(rename=(&var.=per_&var.))*/ 
        # &var.Q (in=&var.crime rename=(v4002=v3002));
  # by idhh idper year yearq v3002;
  # if not &var.crime then do;
    # &var.=0;
    # wgtviccy=0;
    # ADJINC_WT=0;
  # end;
  # else if missing(wgtviccy) then ADJINC_WT=0;
  # else ADJINC_WT = wgtviccy/wgtpercy;

  # keep yr_grp v2117 v2118 wgtpercy idhh idper year: adj: &var. /*per_&var.*/ wgtviccy v3002;

# run;

warning( '`violent` already on `person_df` .. unclear the point of merge here' )


per1_df <-
	transform(
		person_df ,
		
		adjinc_wt =
			ifelse( violent == 0 | is.na( wgtviccy ) , 0 , wgtviccy / wgtpercy ) ,
		
		wgtviccy = ifelse( violent == 0 , 0 , wgtviccy )
	)
	
	
			
per1_df <- per1_df[ c( 'yr_grp' , 'v2117' , 'v2118' , 'wgtpercy' , 'idhh' , 'idper' , 'year' , 'yearq' , 'adjinc_wt' , 'violent' , 'wgtviccy' , 'v3002' ) ]




# * Step 1 - set PREV_WGT based on interviews and incidents;
# data per2;
  # merge per1 
    # wgt_H (in=weights) 
    # &var.Y (in=&var.crime) 
    # interviews ( in=interviewed)
	# inc_h (in=inchocc);
  # by idhh idper year;


wgt_h_df[ , 'weights' ] <- TRUE
violenty_df[ , 'violentcrime' ] <- TRUE
interviews_df[ , 'interviewed' ] <- TRUE
inc_h_df[ , 'inchocc' ] <- TRUE



per2_df <- merge( per1_df , wgt_h_df , by = c( 'idhh' , 'idper' , 'year' ) , all = TRUE )
per2_df <- merge( per2_df , violenty_df , by = c( 'idhh' , 'idper' , 'year' ) , all = TRUE )
per2_df <- merge( per2_df , interviews_df , by = c( 'idhh' , 'idper' , 'year' ) , all = TRUE )
per2_df <- merge( per2_df , inc_h_df , by = c( 'idhh' , 'idper' , 'year' ) , all = TRUE )

stopifnot( nrow( per2_df ) == nrow( per1_df ) )



  # if not &var.crime then &var.Y=0;
  # if not interviewed then intY=0;

  # q=scan(strip(put(yearq,8.1)),2,".");

  # if ^missing(yearq) then do;
    # if q in ("1" "2") then H=1;
    # else if q in ("3" "4") then H=2;
  # end;

per2_df[ is.na( per2_df[ , 'violentcrime' ] ) , 'violentcrime' ] <- FALSE
per2_df[ is.na( per2_df[ , 'interviewed' ] ) , 'inty' ] <- 0
per2_df[ , 'q' ] <- substr( per2_df[ , 'yearq' ] , 6 , 6 )
per2_df[ , 'h' ] <-
	ifelse( per2_df[ , 'q' ] %in% 1:2 , 1 ,
	ifelse( per2_df[ , 'q' ] %in% 3:4 , 2 , NA ) )



  # * if 0 crime then prev_wgt = WGTPERCY;
  # if &var.Y=0 then do;
    # PREV_WGT0=WGTPERCY;
    # grp=1;
  # end;

  # * if 1 interview and 1 violent crime reported then prev_wgt=vwgt/2;
  # else if intY=1 and nmiss(VWGT1,VWGT2)=1 and wgtviccy > 0 then do;
    # PREV_WGT0=wgtviccy/2;
    # grp=2;
  # end;

  # *if 2 interiews and 1 report then PREV_WGT= VWGT/2 for both interviews;
  # else if intY=2 and nmiss(VWGT1,VWGT2)=1 then do;
    # PREV_WGT0=max(VWGT1,VWGT2)/2;
    # grp=3;
  # end;

  # *if 2 interviews and 2 reports then PREV_WGT=vwgt/2 for each ;
  # else if intY=2 and nmiss(VWGT1,VWGT2)=0 and wgtviccy > 0 then do;
    # PREV_WGT0=wgtviccy/2;
    # grp=4;
  # end;

# /*  *if 3 interviews and 1 report;, use wgtviccy that is available*/
  # else if intY=3 and n(WgtViccy_1_1, WgtViccy_2_1, WgtViccy_1_2)=1 then do;
	# PREV_WGT0=max(WgtViccy_1_1, WgtViccy_2_1, WgtViccy_1_2)/2;
	# grp=5;
  # end;

# /* if 3 interviews and 3 reports, use respective weights */
  # else if intY=3 and n(WgtViccy_1_1, WgtViccy_2_1, WgtViccy_1_2)=3 then do;
	# PREV_WGT0=wgtviccy/2;
    # grp=6;
  # end;

  # else if intY=3 and n(WgtViccy_1_1)=1 and n(WgtViccy_2_1)=1 then do;
	# if h=1 then PREV_WGT0=WgtViccy_1_1/2;
	# else if h=2 then PREV_WGT0=WgtViccy_2_1/2;
    # grp=7;
  # end;

# run;

per2_df <-
	transform(
		per2_df ,
		
		grp =
			ifelse( is.na( violenty ) , 1 ,
			ifelse( inty == 1 & ( ( as.numeric( !is.na( vwgt1 ) ) + as.numeric( !is.na( vwgt2 ) ) ) == 1 ) & wgtviccy > 0 , 2 ,
			ifelse( inty == 2 & ( ( as.numeric( !is.na( vwgt1 ) ) + as.numeric( !is.na( vwgt2 ) ) ) == 1 ) , 3 ,
			ifelse( inty == 2 & !is.na( vwgt1 ) & !is.na( vwgt2 ) & wgtviccy > 0 , 4 ,
			ifelse( inty == 3 & ( ( as.numeric( !is.na( wgtviccy_1_1 ) ) + as.numeric( !is.na( wgtviccy_2_1 ) ) + as.numeric( !is.na( wgtviccy_1_2 ) ) ) == 1 ) , 5 ,
			ifelse( inty == 3 & !is.na( wgtviccy_1_1 ) & !is.na( wgtviccy_2_1 ) & !is.na( wgtviccy_1_2 ) , 6 ,
			ifelse( inty == 3 & !is.na( wgtviccy_1_1 ) & !is.na( wgtviccy_2_1 ) & h == 1 , 7 ,
			ifelse( inty == 3 & !is.na( wgtviccy_1_1 ) & !is.na( wgtviccy_2_1 ) & h == 2 , 8 , 9 ) ) ) ) ) ) ) ) )
			


table( per2_df[ , 'grp' ] , useNA = 'always' )


# everybody in group 9 has both a wgtviccy == 0 & wgtpercy == 0

stopifnot( nrow( subset( per2_df , grp == 9 & wgtviccy > 0 ) ) == 0 )
stopifnot( nrow( subset( per2_df , grp == 9 & wgtpercy > 0 ) ) == 0 )

warning( 'probably OK to give grp == 9 zero weight' )

per2_df <-
	transform(
		per2_df ,
		
		prev_wgt0 =
			ifelse( grp == 1 , wgtpercy ,
			ifelse( grp == 2 , wgtviccy / 2 ,
			ifelse( grp == 3 , pmax( vwgt1 , vwgt2 , na.rm = TRUE ) / 2 ,
			ifelse( grp == 4 , wgtviccy / 2 ,
			ifelse( grp == 5 , pmax( wgtviccy_1_1 , wgtviccy_1_2 , wgtviccy_2_1 , na.rm = TRUE ) / 2 ,
			ifelse( grp == 6 , wgtviccy / 2 ,
			ifelse( grp == 7 , wgtviccy_1_1 / 2 ,
			ifelse( grp == 8 , wgtviccy_2_1 / 2 ,
			ifelse( grp == 9 , 0 ,
				NA ) ) ) ) ) ) ) ) ) )


# matches table 8
# https://www.ojp.gov/pdffiles1/bjs/grants/308745.pdf#page=44
with(subset(per2_df,year==2021),tapply(prev_wgt0,grp,sum))


# %mend;

# %loop(violent) 

# * Step 2 - Calibrate so that sum(prev_wgt) with 1 vic = sum(vic) with 1 vic; 
# proc sql;
  # create table c1_vic as select distinct year, sum(wgtviccy) as vwgt_1v from per2 where violentY=1 group by year ;
  # create table c1_prev as select distinct year, sum(PREV_WGT0) as prev_1v from per2 where violentY=1 group by year ;
  # create table prec1_prev_example as select distinct year, grp, sum(PREV_WGT0) as sum_PREV_WGT0, sum(WGTPERCY) as sum_WGTPERCY 
    # from per2 where year=2021 group by year, grp ;
  # create table prec1_prev_example2 as select distinct year,  sum(PREV_WGT0) as sum_PREV_WGT0, sum(WGTPERCY) as sum_WGTPERCY
    # from per2 where year=2021 group by year ;
# quit;


# 2021 2574066 matches prev_wgt1
# https://www.ojp.gov/pdffiles1/bjs/grants/308745.pdf#page=45
c1_vic_df <-
	sqldf(
		"SELECT year , SUM( wgtviccy ) AS vwgt_1v
		FROM per2_df
		WHERE violenty = 1
		GROUP BY year"
	)
	
 
# 2021 1952836 matches prev_wgt0
# https://www.ojp.gov/pdffiles1/bjs/grants/308745.pdf#page=45
c1_prev_df <-
	sqldf(
		"SELECT year , SUM( prev_wgt0 ) As prev_1v
		FROM per2_df
		WHERE violenty = 1
		GROUP BY year"
	)
	
prec1_prev_example_df <-
	sqldf(
		"SELECT year , grp , SUM( prev_wgt0 ) AS sum_prev_wgt0 , SUM( wgtpercy ) AS sum_wgtpercy
		FROM per2_df
		WHERE year = 2021
		GROUP BY year , grp"
	)
	
prec1_prev_example2_df <-
	sqldf(
		"SELECT year , SUM( prev_wgt0 ) AS sum_prev_wgt0 , SUM( wgtpercy ) AS sum_wgtpercy
		FROM per2_df
		WHERE year = 2021
		GROUP BY year"
	)
	
	





# * Matches table 13 in RTI report;
# title "2021 example - before 1st calibration";
# proc print data=prec1_prev_example noobs; run;
# proc print data=prec1_prev_example2 noobs; run;
# title;
# proc sort data=per2;
  # by year; run;

# data per3;
  # merge per2 c1_vic c1_prev;
  # by year;
  # if violentY = 0 then prev_wgt1=prev_wgt0;
  # if violentY > 0 and wgtpercy > 0 then prev_wgt1=prev_wgt0*(vwgt_1v/prev_1v);
# run;



per3_df <- merge( merge( per2_df , c1_vic_df ) , c1_prev_df )

stopifnot( nrow( per3_df ) == nrow( per2_df ) )
	
per3_df <-
	transform(
		per3_df ,
		prev_wgt1 = 
			ifelse( is.na( violenty ) , prev_wgt0 ,
			ifelse( !is.na( violenty ) & wgtpercy > 0 , 
				prev_wgt0 * ( vwgt_1v / prev_1v ) , NA ) )
	)
	
warning( 'not sure if sas code translates here' )

per3_df[ !is.na( per3_df[ , 'violenty' ] ) & per3_df[ , 'wgtpercy' ] == 0 , 'prev_wgt1' ] <- 0

stopifnot( all( !is.na( per3_df[ , 'prev_wgt1' ] ) ) )


# title "2021 example - replicates table 14 in report [xxx]";
# proc sql;
  # select distinct year, sum(wgtviccy) as wgtviccy_1vic from per3 where violenty=1 and year=2021 group by year;
  # select distinct year, sum(prev_wgt1) as prev1_1vic from per3 where violenty=1 and year=2021 group by year;
  # select distinct year, sum(prev_wgt0) as prev0_1vic from per3 where violenty=1 and year=2021 group by year;

  # select distinct year, sum(wgtviccy) as wgtviccy_2vic from per3 where violenty>1 and year=2021 group by year;
  # select distinct year, sum(prev_wgt1) as prev1_2vic from per3 where violenty>1 and year=2021 group by year;
  # select distinct year, sum(prev_wgt0) as prev0_2vic from per3 where violenty>1 and year=2021 group by year;

  # create table cal1 as select distinct year, sum(prev_wgt1) as prev_wgt1 from per3 where violenty=1 group by year;
# run;


# data check1;
  # merge c1_vic c1_prev cal1 ; by year; 
  # diff = round(vwgt_1v - prev_wgt1,.0001); run;

# proc sql;
 # create table postc1_prev_example as select distinct year, grp, sum(prev_wgt1) as prev_wgt1, sum(WGTPERCY) as sum_WGTPERCY 
    # from per3 where year=2021 group by year, grp ;
  # create table postc1_prev_example2 as select distinct year,  sum(prev_wgt1) as prev_wgt1, sum(WGTPERCY) as sum_WGTPERCY
    # from per3 where year=2021 group by year ;
# quit;

# title "2021 example - after 1st calibration";
# proc print data=postc1_prev_example noobs; run;
# proc print data=postc1_prev_example2 noobs; run;
# title;

# * Step 3 - Calibrate weights so that all cases have sum(prev) = sum(per);
# proc sql;
  # create table allper as select distinct year, sum(WGTPERCY) as sum_per from per3 group by year;
  # create table with_crime as select distinct year, sum(prev_wgt1) as prev_with_crime from per3 where violenty > 0 group by year;
  # create table no_crime as select distinct year, sum(prev_wgt1) as prev_no_crime from per3 where violenty = 0 group by year;
# quit;


allper_df <-
	sqldf( "SELECT year , SUM( wgtpercy ) AS sum_per FROM per3_df GROUP BY year" )
	
with_crime_df <-
	sqldf( "SELECT year , SUM( prev_wgt1 ) AS prev_with_crime FROM per3_df WHERE violenty > 0 GROUP BY year" )
	
no_crime_df <-
	sqldf( "SELECT year , SUM( prev_wgt1 ) AS prev_no_crime FROM per3_df WHERE violenty IS NULL GROUP BY year" )
	
	



# title "Final dataset to export";
# *This creates the final dataset per4 that contains the final OVAM weight (prev_wgt) variable.
# *Use prev_wgt for your analysis;
# data mysas.per4;
  # merge per3 allper with_crime no_crime;
  # by year;
  # if violenty=0 then prev_wgt2 = prev_wgt1 * ((sum_per - prev_with_crime)/prev_no_crime);
  # else prev_wgt2 = prev_wgt1;
  # prev_wgt=prev_wgt2;

  # victim=(violenty > 0);

      # if violenty <=0 then VicYearCat=99;
  # else if violenty =1 then VicYearCat=1;
  # else VicYearCat=2;
# run;


per4_df <- merge( merge( merge( per3_df , allper_df ) , with_crime_df ) , no_crime_df )

stopifnot( nrow( per4_df ) == nrow( per3_df ) )

per4_df <-
	transform(
		per4_df ,
		
		prev_wgt =
			ifelse( is.na( violenty ) ,
				prev_wgt1 * ( ( sum_per - prev_with_crime ) / prev_no_crime ) ,
				prev_wgt1 ) ,
				
		victim = !is.na( violenty )
	)
	
	

# title "Estimates and SE using OVAM weights";
# *compute estimates and standard errors for all years (except for 2016, which is estimates only no SE) 
# using OVAM; 
# *This should match the OVAM column of appendix tables A-3 for estimates and A-5 for SEs;
# proc surveymeans  data = mysas.per4 varmethod = taylor sum mean;
  # strata yr_grp v2117; 
  # cluster v2118; 
  # weight PREV_WGT;
  # domain year VicYearCat ;
  # var  Victim;
# run;

# https://www.ojp.gov/pdffiles1/bjs/grants/308745.pdf#page=54
# matches table 16
# > with( subset( per4_df,year==2021),sum(prev_wgt))
# [1] 279188573
# > with( subset( per4_df,year==2021 & !is.na(violenty)),sum(prev_wgt))
# [1] 3065934



warning( 'not correct' )
table(subset(per4_df,is.na(v2118))$year)
per4_df[ is.na( per4_df[ , 'v2118' ] ) , 'v2118' ] <- 0
table(subset(per4_df,is.na(v2117))$year)
per4_df[ is.na( per4_df[ , 'v2117' ] ) , 'v2117' ] <- 0
		
options(scipen=20)
options('survey.lonely.psu' = 'adjust')
		
new_design <-
	svydesign( 
		~ v2118 ,
		strata = ~ interaction( yr_grp , v2117 ) ,
		data = per4_df ,
		weights = ~ prev_wgt ,
		nest = TRUE
	)




old_design <-
	svydesign( 
		~ v2118 ,
		strata = ~ interaction( yr_grp , v2117 ) ,
		data = per4_df ,
		weights = ~ wgtpercy ,
		nest = TRUE
	)

warning( 'what is vicyearcat' )

# matches https://bjs.ojp.gov/document/nmpncvs.pdf#page=16
svyby( ~ as.numeric( victim ) , ~ year , subset( old_design , year > 1993 ) , svymean )
svyby( ~ as.numeric( victim ) , ~ year , subset( new_design , year > 1993 ) , svymean )


