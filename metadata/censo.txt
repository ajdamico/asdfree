chapter_title: Brazilian Censo Demografico
authorship_line: *Contributed by Dr. Djalma Pessoa <<pessoad@gmail.com>>*

~~~{dataset_introduction}
Brazil's decennial census.
~~~

table_structure: * One table with one row per household and a second table with one row per individual within each household.  The 2000 Censo also includes a table with one record per family inside each household.

generalizable_population: * An enumeration of the civilian non-institutional population of Brazil.

publication_period: * Released decennially by IBGE since 2000, however earlier extracts are available from IPUMS International.

administrative_organization: * Administered by the [Instituto Brasileiro de Geografia e Estatistica](http://www.ibge.gov.br/).


needs_catalog_block: yes
catalog_subset_description: # 2010 only
catalog_subset: chapter_tag_cat <- subset( chapter_tag_cat , year == 2010 )


~~~{analysis_examples_survey_design}
library(survey)

# choose columns to import from both household and person files
columns_to_import <-
	c( 'v6531' , 'v6033' , 'v0640' , 'v0001' , 'v0601' )

# initiate a data.frame to stack all downloaded censo states
chapter_tag_df <- data.frame( NULL )
		
# only construct one censo design at a time (2000 and 2010 should not be stacked)
stopifnot( length( unique( chapter_tag_cat[ , 'year' ] ) ) == 1 )
		
# loop through all downloaded censo states
for( this_state in seq( nrow( chapter_tag_cat ) ) ){
	
	# add the design information to the columns to import
	these_columns_to_import <-
		unique( 
			c( 
				columns_to_import , 
				as.character( 
					chapter_tag_cat[ this_state , c( 'weight' , paste0( 'fpc' , 1:5 ) ) ] 
				) 
			) 
		)

	# remove NAs
	these_columns_to_import <- these_columns_to_import[ !is.na( these_columns_to_import ) ]

	# load structure files, lowercase variable names, set unwanted columns to missing
	dom_stru <- SAScii::parse.SAScii( chapter_tag_cat[ this_state , 'dom_sas' ] )
	dom_stru$varname <- tolower( dom_stru$varname )
	
	pes_stru <- SAScii::parse.SAScii( chapter_tag_cat[ this_state , 'pes_sas' ] )
	pes_stru$varname <- tolower( pes_stru$varname )
	
	# import fixed-width files
	this_chapter_tag_dom_df <- 
		data.frame( readr::read_fwf(
			chapter_tag_cat[ this_state , 'dom_file' ] ,
			readr::fwf_widths( 
				abs( dom_stru$width ) , col_names = dom_stru[ , 'varname' ] 
			) ,
			col_types = 
				paste0( 
					ifelse( !( dom_stru$varname %in% these_columns_to_import ) , 
						"_" , 
						ifelse( dom_stru$char , "c" , "d" ) 
					) , 
					collapse = "" 
				)
		) )

	this_chapter_tag_pes_df <- 
		data.frame( readr::read_fwf(
			chapter_tag_cat[ this_state , 'pes_file' ] ,
			readr::fwf_widths( 
				abs( pes_stru$width ) , col_names = pes_stru[ , 'varname' ] 
			) ,
			col_types = 
				paste0( 
					ifelse( !( pes_stru$varname %in% these_columns_to_import ) , 
						"_" , 
						ifelse( pes_stru$char , "c" , "d" ) 
					) , 
					collapse = "" 
				)
		) )

	# add decimals
	for( this_variable in these_columns_to_import ) {
	
		if( 
			( this_variable %in% names( this_chapter_tag_dom_df ) ) & 
			!isTRUE( all.equal( 1 , dom_stru[ dom_stru$varname == this_variable , 'divisor' ] ) ) 
		){
			this_chapter_tag_dom_df[ , this_variable ] <- 
				dom_stru[ dom_stru$varname == this_variable , 'divisor' ] * 
				this_chapter_tag_dom_df[ , this_variable ]
		}
	
		if( 
			( this_variable %in% names( this_chapter_tag_pes_df ) ) & 
			!isTRUE( all.equal( 1 , pes_stru[ pes_stru$varname == this_variable , 'divisor' ] ) ) 
		){
			this_chapter_tag_pes_df[ , this_variable ] <- 
				pes_stru[ pes_stru$varname == this_variable , 'divisor' ] * 
				this_chapter_tag_pes_df[ , this_variable ]
		}
	
	
	}

	# merge household and person tables
	var_names_diff <- setdiff(names(this_chapter_tag_pes_df),names(this_chapter_tag_dom_df) )
  
  	this_chapter_tag_df <- merge( this_chapter_tag_dom_df , this_chapter_tag_pes_df[, c("v0001","v0300",var_names_diff)],
                           by.x = c("v0001","v0300") , by.y = c("v0001", "v0300" ))

	# confirm one record per person, with household information merged on
	stopifnot( nrow( this_chapter_tag_df ) == nrow( this_chapter_tag_pes_df ) )
	
	rm( this_chapter_tag_dom_df , this_chapter_tag_pes_df ) ; gc()
	
	# stack the merged tables
	chapter_tag_df <- rbind( chapter_tag_df , this_chapter_tag_df )
	
	rm( this_chapter_tag_df ) ; gc()
	
}

# add a column of ones
chapter_tag_df[ , 'one' ] <- 1

# calculate the finite population correction for each stratum to construct a
# sampling design with weighting areas as strata and households as psu

# the real censo design is stratified with "setor censitarios" rather than 
# "area de ponderacao" but those are not disclosed due to confidentiality

# v0010 is the person or household weight
# v0011 is the weighting area identifier
# both of these are specified inside `chapter_tag_cat[ c( 'fpc1' , 'weight' ) ]`

fpc_sums <- aggregate( v0010 ~ v0011 , data = chapter_tag_df , sum )

names( fpc_sums )[ 2 ] <- 'fpc'

chapter_tag_df <- merge( chapter_tag_df , fpc_sums ) ; gc()

chapter_tag_wgts <-
	survey::bootweights(
		strata = chapter_tag_df[ , chapter_tag_cat[ 1 , 'fpc1' ] ] ,
		psu = chapter_tag_df[ , chapter_tag_cat[ 1 , 'fpc4' ] ] ,
		replicates = 80 ,
		fpc = chapter_tag_df[ , 'fpc' ]
	)

# construct a complex survey design object
chapter_tag_design <-
	survey::svrepdesign(
		weight = ~ v0010 ,
		repweights = chapter_tag_wgts$repweights ,
		type = "bootstrap",
		combined.weights = FALSE ,
		scale = chapter_tag_wgts$scale ,
		rscales = chapter_tag_wgts$rscales ,
		data = chapter_tag_df
	)
	
rm( chapter_tag_df , chapter_tag_wgts , fpc_sums ) ; gc()
~~~


~~~{variable_recoding_block}
chapter_tag_design <-
	update(
		
		chapter_tag_design ,
		
		nmorpob1 = ifelse( v6531 >= 0 , as.numeric( v6531 < 70 ) , NA ) ,
		nmorpob2 = ifelse( v6531 >= 0 , as.numeric( v6531 < 80 ) , NA ) , 
		nmorpob3 = ifelse( v6531 >= 0 , as.numeric( v6531 < 90 ) , NA ) , 
		nmorpob4 = ifelse( v6531 >= 0 , as.numeric( v6531 < 100 ) , NA ) , 
		nmorpob5 = ifelse( v6531 >= 0 , as.numeric( v6531 < 140 ) , NA ) , 
		nmorpob6 = ifelse( v6531 >= 0 , as.numeric( v6531 < 272.50 ) , NA ) ,
		
		sexo = factor( v0601 , labels = c( "masculino" , "feminino" ) ) ,
		
		state_name = 
			factor( 
				v0001 , 
				levels = c( 11:17 , 21:29 , 31:33 , 35 , 41:43 , 50:53 ) ,
				labels = c( "Rondonia" , "Acre" , "Amazonas" , 
				"Roraima" , "Para" , "Amapa" , "Tocantins" , 
				"Maranhao" , "Piaui" , "Ceara" , "Rio Grande do Norte" , 
				"Paraiba" , "Pernambuco" , "Alagoas" , "Sergipe" , 
				"Bahia" , "Minas Gerais" , "Espirito Santo" , 
				"Rio de Janeiro" , "Sao Paulo" , "Parana" , 
				"Santa Catarina" , "Rio Grande do Sul" , 
				"Mato Grosso do Sul" , "Mato Grosso" , "Goias" , 
				"Distrito Federal" )
			)
	)
~~~



group_by_variable: state_name
linear_variable: v6033
categorical_variable: sexo
ratio_estimation_numerator: nmorpob1
ratio_estimation_denominator: nmorpob1 + one
ratio_narm: , na.rm = TRUE
subset_definition: v0640 == 1
subset_definition_description: married persons
binary_variable: nmorpob6
binary_narm: , na.rm = TRUE

~~~{convey_block}
## Poverty and Inequality Estimation with `convey` \\ {-}

The R `convey` library estimates measures of income concentration, poverty, inequality, and wellbeing.  [This textbook](https://guilhermejacob.github.io/context/) details the available features.  As a starting point for CHAPTER_TAG users, this code calculates the gini coefficient on complex sample survey data:

```{r eval = FALSE , results = "hide" }
library(convey)
chapter_tag_design <- convey_prep( chapter_tag_design )

sub_chapter_tag_design <- 
	subset( chapter_tag_design , v6531 >= 0 )

svygini( ~ v6531 , sub_chapter_tag_design , na.rm = TRUE )
```
~~~


~~~{replication_example_block}
---

## Replication Example {-}

```{r eval = FALSE , results = "hide" }

```

~~~



needs_travis_build_status_line: yes

sample_setup_breaks: 51

broken_sample_test_condition: all( chapter_tag_cat$year == 2010 )

~~~{sample_setup_block}
this_sample_break <- Sys.getenv( "this_sample_break" )

library(lodown)

chapter_tag_cat <-
	get_catalog( "chapter_tag" ,
		output_dir = file.path( path.expand( "~" ) , "CHAPTER_TAG" ) )

# skip bahia, minas, sao paulo, and rio grande do sul because the 2010 files are too big
chapter_tag_cat <- subset( chapter_tag_cat , !( state %in% c( 'ba10' , 'mg10' , 'sp110' , 'rs10' ) ) )
		
chapter_tag_cat <- chapter_tag_cat[ split( seq( nrow( chapter_tag_cat ) ) , 1 + sort( seq( nrow( chapter_tag_cat ) ) %% sample_setup_breaks ) )[[ this_sample_break ]] , ]

chapter_tag_cat <- lodown( "chapter_tag" , chapter_tag_cat )

~~~

