chapter_title: Consumer Expenditure Survey

needs_actions_build_status_line: yes

~~~{dataset_introduction}
The Consumer Expenditure Survey (CES) is the authoritative data source to understand how Americans spend money.  Participating households keep a running diary about every purchase over fifteen months.  Those diaries are then summed up into precise expenditure categories.
~~~

table_structure: * One table of survey responses per quarter with one row per sampled household (consumer unit).  Additional tables containing one record per expenditure

generalizable_population: * A complex sample survey designed to generalize to the civilian non-institutional population of the United States.

publication_period: * Released annually since 1996.

administrative_organization: * Administered by the [Bureau of Labor Statistics](http://www.bls.gov/).



~~~{reading_block}
Please skim before you begin:

1. https://www.bls.gov/cex/pumd-getting-started-guide.htm

2.

3. This poem

```{r}
# 
# 
# 
```
~~~


~~~{download_and_import_block}

Download both the prior and current year of interview microdata:
```{r eval = FALSE }
library(haven)

tf_prior_year <- tempfile()

this_url_prior_year <- "https://www.bls.gov/cex/pumd/data/stata/intrvw20.zip"

download.file( this_url_prior_year , tf_prior_year , mode = 'wb' )

unzipped_files_prior_year <- unzip( tf_prior_year , exdir = tempdir() )

tf_current_year <- tempfile()

this_url_current_year <- "https://www.bls.gov/cex/pumd/data/stata/intrvw21.zip"

download.file( this_url_current_year , tf_current_year , mode = 'wb' )

unzipped_files_current_year <- unzip( tf_current_year , exdir = tempdir() )

unzipped_files <- c( unzipped_files_current_year , unzipped_files_prior_year )
```





Import and stack all 2021 quarterly files plus 2022's first quarter:
```{r eval = FALSE }
fmli_files <- grep( "fmli2[1-2]" , unzipped_files , value = TRUE )

fmli_tbls <- lapply( fmli_files , read_dta )

fmli_dfs <- lapply( fmli_tbls , data.frame )

fmli_dfs <- 
	lapply( 
		fmli_dfs , 
		function( w ){ names( w ) <- tolower( names( w ) ) ; w }
	)

fmli_cols <- lapply( fmli_dfs , names )

intersecting_cols <- Reduce( intersect , fmli_cols )

fmli_dfs <- lapply( fmli_dfs , function( w ) w[ intersecting_cols ] )

chapter_tag_df <- do.call( rbind , fmli_dfs )
```


Scale the weight columns based on the number of months in 2021:
```{r eval = FALSE }
chapter_tag_df[ , c( 'qintrvyr' , 'qintrvmo' ) ] <-
	sapply( chapter_tag_df[ , c( 'qintrvyr' , 'qintrvmo' ) ] , as.numeric )

weight_columns <- grep( 'wt' , names( chapter_tag_df ) , value = TRUE )


chapter_tag_df <-
	transform(
		chapter_tag_df ,
		mo_scope =
			ifelse( qintrvyr %in% 2021 & qintrvmo %in% 1:3 , qintrvmo - 1 ,
			ifelse( qintrvyr %in% 2022 , 4 - qintrvmo , 3 ) )
	)

for ( this_column in weight_columns ){
	chapter_tag_df[ is.na( chapter_tag_df[ , this_column ] ) , this_column ] <- 0
	chapter_tag_df[ , this_column ] <- ( chapter_tag_df[ , this_column ] * chapter_tag_df[ , 'mo_scope' ] / 12 )
}
```


Combine previous quarter and current quarter variables into a single variable:
```{r eval = FALSE }

expenditure_variables <- 
	gsub( "pq$" , "" , grep( "pq$" , names( chapter_tag_df ) , value = TRUE ) )

# confirm that for every variable ending in pq,
# there's the same variable ending in cq
stopifnot( all( paste0( expenditure_variables , 'cq' ) %in% names( chapter_tag_df ) ) )

# confirm none of the variables without the pq or cq suffix exist
if( any( expenditure_variables %in% names( chapter_tag_df ) ) ) stop( "variable conflict" )

for( this_column in expenditure_variables ){

	chapter_tag_df[ , this_column ] <- rowSums( chapter_tag_df[ , paste0( this_column , c( 'pq' , 'cq' ) ) ] , na.rm = TRUE )
	
	# annualize the quarterly spending
	chapter_tag_df[ , this_column ] <- 4 * chapter_tag_df[ , this_column ]
	
	chapter_tag_df[ is.na( chapter_tag_df[ , this_column ] ) , this_column ] <- 0

}
```
~~~


~~~{analysis_examples_survey_design}
Separate the `chapter_tag_df` data.frame into five implicates, each differing from the others only in the multiply-imputed variables:
```{r messages = FALSE , eval = FALSE }
library(survey)
library(mitools)

# create a vector containing all of the multiply-imputed variables
# (leaving the numbers off the end)
mi_vars <- gsub( "5$" , "" , grep( "[a-z]5$" , names( chapter_tag_df ) , value = TRUE ) )

# loop through each of the five variables..
for ( i in 1:5 ){

	# copy the 'chapter_tag_df' table over to a new temporary data frame 'x'
	x <- chapter_tag_df

	# loop through each of the multiply-imputed variables..
	for ( j in mi_vars ){
	
		# copy the contents of the current column (for example 'welfare1')
		# over to a new column ending in 'mi' (for example 'welfaremi')
		x[ , paste0( j , 'mi' ) ] <- x[ , paste0( j , i ) ]
		
		# delete the all five of the imputed variable columns
		x <- x[ , !( names( x ) %in% paste0( j , 1:5 ) ) ]

	}
	
	assign( paste0( 'imp' , i ) , x )

}


chapter_tag_design <- 
	svrepdesign( 
		weights = ~finlwt21 , 
		repweights = "wtrep[0-9]+" , 
		data = imputationList( list( imp1 , imp2 , imp3 , imp4 , imp5 ) ) , 
		type = "BRR" ,
		combined.weights = TRUE ,
		mse = TRUE
	)
```
~~~


~~~{variable_recoding_block}
chapter_tag_design <- 
	update( 
		chapter_tag_design , 
		
		one = 1 ,
		
		any_food_stamp = as.numeric( jfs_amtmi > 0 ) ,
		
		bls_urbn = factor( bls_urbn , levels = 1:2 , labels = c( 'urban' , 'rural' ) ) ,
		
		sex_ref = factor( sex_ref , levels = 1:2 , labels = c( 'male' , 'female' ) )
		
	)
~~~

group_by_variable: bls_urbn
linear_variable: totexp
categorical_variable: sex_ref
ratio_estimation_numerator: totexp
ratio_estimation_denominator: fincbtxmi
subset_definition: state == '06'
subset_definition_description: california residents
binary_variable: any_food_stamp



~~~{intermission_block}
<center>https://en.wikipedia.org/wiki/Lorem_ipsum</center>
~~~


~~~{replication_example_block}
## Replication Example {-}
https://www.bls.gov/cex/tables/calendar-year/mean/cu-all-detail-2021.pdf
```{r eval = FALSE , results = "hide" }
result <- MIcombine( with( chapter_tag_design , svytotal( ~ one ) ) )
stopifnot( round( coef( result ) , -3 ) == 133595000 )

```
~~~







