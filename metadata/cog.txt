chapter_title: Census of Governments

needs_actions_build_status_line: yes

~~~{dataset_introduction}

~~~

table_structure: * 

generalizable_population: *

publication_period: * 

administrative_organization: *


~~~{reading_block}
Please skim before you begin:

1.

2.

3. This human-composed haiku or a bouquet of [artificial intelligence-generated limericks](https://www.gnod.com/search/ai#q=write%20a%20limerick-style%20poem%20about%20the%20chapter_title)

```{r}
# city hall marriage
# schools cops with fire water
# fed mail invite lost
```
~~~

~~~{download_and_import_block}

Download, import, and stack the government units listing file:
```{r eval = FALSE , results = "hide" }
library(readxl)

tf_gus <- tempfile()

gus_url <- "https://www2.census.gov/programs-surveys/gus/datasets/2022/govt_units_2022.ZIP"

download.file( gus_url , tf_gus , mode = 'wb' )

unzipped_files_gus <- unzip( tf_gus , exdir = tempdir() )

xlsx_gus_fn <- grep( "\\\\.xlsx$" , unzipped_files_gus , value = TRUE )

xlsx_sheets <- excel_sheets( xlsx_gus_fn )

# read all sheets into a list of tibbles
gus_tbl_list <- lapply( xlsx_sheets , function( w ) read_excel( xlsx_gus_fn , sheet = w ) )

# convert all tibbles to data.frame objects
gus_df_list <- lapply( gus_tbl_list , data.frame )

# lowercase all column names
gus_df_list <-
	lapply( 
		gus_df_list , 
		function( w ){ names( w ) <- tolower( names( w ) ) ; w } 
	)

# add the excel tab source to each data.frame
for( i in seq( xlsx_sheets ) ) gus_df_list[[ i ]][ , 'source_tab' ] <- xlsx_sheets[ i ]

# columns in all tables
column_intersect <- Reduce( intersect , lapply( gus_df_list , names ) )

# columns in some but not all tables
column_union <- unique( unlist( lapply( gus_df_list , names ) ) )

# these columns will be discarded by stacking
unique( unlist( lapply( lapply( gus_df_list , names ) , function( w ) column_union[ !column_union %in% w ] ) ) )

# stack all excel sheets, keeping only the columns that all tables have in common
gus_df <-
	Reduce( rbind , lapply( gus_df_list , function( w ) w[ column_intersect ] ) )
```

Download and import the survey of public employment & payroll file, with one record per function (not per unit):
```{r eval = FALSE , results = "hide" }
tf_apes <- tempfile()

apes_url <- "https://www2.census.gov/programs-surveys/apes/datasets/2022/2022%20COG-E%20Individual%20Unit%20Files.zip"

download.file( apes_url , tf_apes , mode = 'wb' )

unzipped_files_apes <- unzip( tf_apes , exdir = tempdir() )

xlsx_apes_fn <- grep( "\\\\.xlsx$" , unzipped_files_apes , value = TRUE )

apes_tbl <- read_excel( xlsx_apes_fn )

apes_df <- data.frame( apes_tbl )

names( apes_df ) <- tolower( names( apes_df ) )
```

Review the non-matches between these two tables then merge:
```{r eval = FALSE , results = "hide" }
# all DEP School Districts and a third of Special Districts are not in the apes_df
table(
	gus_df[ , 'census_id_gidid' ] %in% apes_df[ , 'individual.unit.id' ] ,
	gus_df[ , 'source_tab' ] ,
	useNA = 'always'
)

# state governments are not in the gus_df
table(
	apes_df[ , 'individual.unit.id' ] %in% gus_df[ , 'census_id_gidid' ] ,
	apes_df[ , 'type.of.government' ] ,
	useNA = 'always'
)

# check for overlapping field names
( overlapping_names <- intersect( names( apes_df ) , names( gus_df ) ) )

# rename the state column in `gus_df` to state abbreviation
names( gus_df )[ names( gus_df ) == 'state' ] <- 'stateab'

chapter_tag_df <-
	merge(
		apes_df ,
		gus_df ,
		by.x = 'individual.unit.id' ,
		by.y = 'census_id_gidid' ,
		all.x = TRUE
	)

stopifnot( nrow( chapter_tag_df ) == nrow( apes_df ) )
```

which half:
```{r eval = FALSE , results = "hide" }
tapply( chapter_tag_df$full.time.employees , grepl('Total',chapter_tag_df$government.function),sum)
#    FALSE     TRUE 
# 14944806 14944806 
```

~~~


~~~{variable_recoding_block}
chapter_tag_df <- 
	transform( 
		chapter_tag_df , 
		
		cbsa_indicator_code = 
			factor( 
				as.numeric( f1406720 ) , 
				levels = 0:2 ,
				labels = c( "not metro" , "metro" , "micro" ) 
			) ,
			
		mhi_2020 = f1322620 ,
		
		whole_county_hpsa_2022 = as.numeric( f0978722 ) == 1 ,
		
		census_region = 
			factor( 
				as.numeric( f04439 ) , 
				levels = 1:4 ,
				labels = c( "northeast" , "midwest" , "south" , "west" ) 
			)

	)
	
~~~

group_by_variable: cbsa_indicator_code
linear_variable: mhi_2020
linear_narm: , na.rm = TRUE
categorical_variable: census_region
subset_definition: f12424 == "CA"
subset_definition_description: California
binary_variable: whole_county_hpsa_2022


~~~{intermission_block}
<center>https://en.wikipedia.org/wiki/Lorem_ipsum</center>
~~~


needs_dplyr_block: yes
needs_datatable_block: yes
needs_duckdb_block: yes



~~~{replication_example_block}
## Replication Example {-}

Match the record count in https://www2.census.gov/programs-surveys/apes/datasets/2022/2022_state_and_local.xlsx

```{r eval = FALSE , results = "hide" }
stopifnot( nrow( chapter_tag_df ) == 3232 )
```
~~~