chapter_title: Pesquisa de Orcamentos Familiares

needs_actions_build_status_line: yes -windows -linux

~~~{dataset_introduction}
The Pesquisa de Orcamentos Familiares is Brazil's national survey of household budgets.
~~~

table_structure: * One table of survey responses per sampled household.  Additional tables, many containing one record per expenditure.

generalizable_population: * A complex sample survey designed to generalize to the civilian population of Brazil.

publication_period: * Released at irregular intervals, with only 2002-2003 and 2008-2009 microdata available.

administrative_organization: * Administered by the [Instituto Brasileiro de Geografia e Estatistica](http://www.ibge.gov.br/).



~~~{reading_block}
Please skim before you begin:

1. [Pesquisa de Orçamentos Familiares 2017-2018 Perfil das despesas no Brasil](https://biblioteca.ibge.gov.br/visualizacao/livros/liv101761.pdf)

2. 

3. This human-composed haiku or a bouquet of [artificial intelligence-generated limericks](https://www.gnod.com/search/ai#q=write%20a%20limerick-style%20poem%20about%20the%20chapter_title)

```{r}
# shopping na praia
# roupa, comida, pede
# tres havaianas
```
~~~




~~~{download_and_import_block}

Download and import the dictionary file:

```{r eval = FALSE , results = "hide" }
library(archive)

dictionary_tf <- tempfile()

dictionary_url <-
	paste0(
		"https://ftp.ibge.gov.br/Orcamentos_Familiares/" ,
		"Pesquisa_de_Orcamentos_Familiares_2017_2018/Microdados/Documentacao_20230713.zip"
	)

download.file( dictionary_url , dictionary_tf , mode = 'wb' )

dictionary_files <- archive_extract( dictionary_tf , dir = tempdir() )
```

Import the variable dictionary:

```{r eval = FALSE , results = "hide" }
library(readxl)

dictionary_fn <- file.path( tempdir() , "Dicionários de váriaveis.xls" )

dictionary_tbl <- read_excel( dictionary_fn , sheet = "Morador" , skip = 3 )

dictionary_df <- data.frame( dictionary_tbl )

names( dictionary_df ) <- c( 'position' , 'length' , 'decimals' , 'column_name' , 'description' , 'variable_labels' )

dictionary_df[ c( 'position' , 'length' , 'decimals' ) ] <- sapply( dictionary_df[ c( 'position' , 'length' , 'decimals' ) ] , as.integer )

dictionary_df <- subset( dictionary_df , !is.na( position ) )

```

Import the post-stratification totals:
```{r eval = FALSE , results = "hide" }

post_stratification_fn <- file.path( tempdir() , "Pos_estratos_totais.xlsx" )

post_stratification_tbl <- read_excel( post_stratification_fn , skip = 5 )
	
post_stratification_df <- data.frame( post_stratification_tbl )

names( post_stratification_df ) <- c( 'estrato_pof' , 'pos_estrato' , 'total_pessoas' , 'uf' , 'cod_upa' )
```

Download the latest quarterly file:

```{r eval = FALSE , results = "hide" }
this_tf <- tempfile()

this_url <-
	paste0(
		"https://ftp.ibge.gov.br/Orcamentos_Familiares/" ,
		"Pesquisa_de_Orcamentos_Familiares_2017_2018/Microdados/Dados_20230713.zip"
	)

download.file( this_url , this_tf , mode = 'wb' )

unzipped_files <- unzip( this_tf , exdir = tempdir() )

morador_fn <- grep( 'MORADOR\\.txt$' , unzipped_files , value = TRUE )
```

Import the latest quarterly file:

```{r eval = FALSE , results = "hide" }
library(readr)

morador_tbl <-
	read_fwf(
		morador_fn ,
		fwf_widths( 
			widths = dictionary_df[ , 'length' ] , 
			col_names = dictionary_df[ , 'column_name' ] 
		) ,
		col_types = 
			paste0( ifelse( is.na( dictionary_df[ , 'decimals' ] ) , "c" , "d" ) , collapse = '' )
	)

morador_df <- data.frame( morador_tbl )

names( morador_df ) <- tolower( names( morador_df ) )

```



Import the latest quarterly file:

```{r eval = FALSE , results = "hide" }
chapter_tag_df <- merge( morador_df , post_stratification_df )

stopifnot( nrow( chapter_tag_df ) == nrow( morador_df ) )
```

~~~






~~~{analysis_examples_survey_design}
```{r eval = FALSE , results = "hide" }
options( survey.lonely.psu = "adjust" )

library(survey)

pre_stratified_design <- 
	svydesign(
		id = ~ cod_upa , 
		strata = ~ estrato_pof ,
		weights = ~ peso_final ,
		data = chapter_tag_df ,
		nest = TRUE
	)

population_totals <- 
	data.frame(
		pos_estrato = unique( chapter_tag_df[ , 'pos_estrato' ] ) , 
		Freq = unique( chapter_tag_df[ , 'total_pessoas' ] ) 
	)

chapter_tag_design <-
	postStratify(
		pre_stratified_design , 
		~ pos_estrato , 
		population_totals
	)

```
~~~


~~~{variable_recoding_block}

chapter_tag_design <- 
	update(
		chapter_tag_design , 
		
		one = 1 ,
		
		# centimeters instead of meters
		altura_imputado = altura_imputado / 100 ,
		
		age_categories =
			factor( 
				1 + findInterval( idade_anos , 
					c( 20 , 25 , 30 , 35 , 45 , 55 , 65 , 75 ) ) ,
				levels = 1:9 , labels = c( "under 20" , "20-24" , "25-29" ,
				"30-34" , "35-44" , "45-54" , "55-64" , "65-74" , "75+" )
			) ,
		
		# create a body mass index (bmi) variable, excluding babies (who have altura_imputado==0)			
		body_mass_index = ifelse( altura_imputado == 0 , 0 , peso_imputado / ( altura_imputado ^ 2 ) ) ,
		
		sexo = ifelse( cod_sexo == '01' , "masculino" , ifelse( cod_sexo == '02' , "feminino" , NA ) )
		
		
	)

chapter_tag_design <-
	transform(
		chapter_tag_design ,
		
		# individuals with a low bmi - underweight
		underweight = ifelse( body_mass_index < 18.5 , 1 , 0 ) ,
		
		# individuals with a high bmi - overweight
		overweight = ifelse( body_mass_index >= 25 , 1 , 0 ) ,
		
		# individuals with a very high bmi - obese
		obese = ifelse( body_mass_index >= 30 , 1 , 0 )
	)



~~~


group_by_variable: sexo

categorical_variable: age_categories

linear_variable: body_mass_index
linear_narm: , na.rm = TRUE

ratio_estimation_numerator: peso_imputado
ratio_estimation_denominator: altura_imputado
ratio_narm: , na.rm = TRUE

subset_definition: underweight == 1

binary_variable: obese
binary_narm: , na.rm = TRUE




~~~{intermission_block}
<center>https://en.wikipedia.org/wiki/Lorem_ipsum</center>
~~~


needs_srvyr_block: yes



~~~{convey_block}
## Poverty and Inequality Estimation with `convey` \\ {-}

The R `convey` library estimates measures of income concentration, poverty, inequality, and wellbeing.  [This textbook](https://guilhermejacob.github.io/context/) details the available features.  As a starting point for CHAPTER_TAG users, this code calculates the gini coefficient on complex sample survey data:

```{r eval = FALSE , results = "hide" }
library(convey)
chapter_tag_design <- convey_prep( chapter_tag_design )

svygini( ~ vd4020n , chapter_tag_design , na.rm = TRUE )
```
~~~


~~~{replication_example_block}
## Replication Example {-}

This example matches statistics and coefficients of variation from [Tabela 4092 - Pessoas de 14 anos ou mais de idade, por condição em relação à força de trabalho e condição de ocupação](https://sidra.ibge.gov.br/tabela/4092):

```{r eval = FALSE , results = "hide" }
nationwide_adult_population <- svytotal( ~ pia , chapter_tag_design , na.rm = TRUE )
	
stopifnot( round( coef( nationwide_adult_population ) / 1000000 , 3 ) == 174.228 )
stopifnot( round( cv( nationwide_adult_population ) / 1000000 , 3 ) == 0 )
	
nationwide_labor_force <- svytotal( ~ pea_c , chapter_tag_design , na.rm = TRUE )

stopifnot( round( coef( nationwide_labor_force ) / 1000000 , 3 ) == 107.257 )
stopifnot( round( cv( nationwide_labor_force ) * 100 , 1 ) == 0.2 )
	
nationwide_employed <- svytotal( ~ ocup_c , chapter_tag_design , na.rm = TRUE )

stopifnot( round( coef( nationwide_employed ) / 1000000 , 3 ) == 97.825 )
stopifnot( round( cv( nationwide_employed ) * 100 , 1 ) == 0.2 )
	
nationwide_unemployed <- svytotal( ~ desocup30 , chapter_tag_design , na.rm = TRUE )

stopifnot( round( coef( nationwide_unemployed ) / 1000000 , 3 ) == 9.432 )
stopifnot( round( cv( nationwide_unemployed ) * 100 , 1 ) == 1.2 )
	
nationwide_not_in_labor_force <-
	svytotal( ~ as.numeric( pia & !pea_c ) , chapter_tag_design , na.rm = TRUE )

stopifnot( round( coef( nationwide_not_in_labor_force ) / 1000000 , 3 ) == 66.972 )
stopifnot( round( cv( nationwide_not_in_labor_force ) * 100 , 1 ) == 0.3 )
	

```

~~~
