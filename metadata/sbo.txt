chapter_title: Survey of Business Owners

needs_actions_build_status_line: yes -linux -windows

~~~{replacement_block}
MIcombine
sbo_MIcombine
MIcombine( with(
MIcombine( sbo_with(
design <- subset(
design <- sbo_subset(
	update(
	sbo_update(
MIsvyttest
# sbo_MIsvyttest
MIsvychisq
# sbo_MIsvychisq
MIsvyciprop
# sbo_MIsvyciprop
degf( sbo_design$designs[[1]] )
sbo_degf( sbo_design )
summary( glm_result )
glm_result
~~~


~~~{dataset_introduction}
Before its replacement in 2018 by the [Annual Business Survey](https://www.census.gov/newsroom/press-releases/2018/annual-business-survey.html), nearly every tax-filing sole proprietorship, partnership, and corporation nationwide completed this [questionnaire](https://www.census.gov/programs-surveys/sbo/technical-documentation/questionnaires.html), with 2007 the only microdata year.
~~~



table_structure: * One table with one row per firm per state per industry, except [eight collapsed geographies](https://www2.census.gov/econ/sbo/07/pums/2007_sbo_pums_users_guide.pdf#page=9).

generalizable_population: * A complex sample survey designed to generalize to [most firms in the United States](https://www.census.gov/programs-surveys/sbo/technical-documentation/methodology.2007.html), public microdata includes [classifiable (non-identifiable) firms](https://www2.census.gov/econ/sbo/07/pums/2007_sbo_pums_users_guide.pdf#page=17), i.e. nearly all businesses but only about half of workers.

publication_period: * Released quinquennially from 1972 until 2012 in the Economic Census with no updates expected.

administrative_organization: * Administered by the [U.S. Census Bureau](http://www.census.gov/).  [Annual Business Survey](https://www.census.gov/programs-surveys/abs/) now conducted jointly with the [National Center for Science and Engineering Statistics](https://ncses.nsf.gov/) within the [National Science Foundation](https://www.nsf.gov/).

~~~{reading_block}
Please skim before you begin:

1. [2007 Survey of Business Owners (SBO) Public Use Microdata Sample (PUMS) Data Users Guide](https://www2.census.gov/econ/sbo/07/pums/2007_sbo_pums_users_guide.pdf)

2. [Comparability to the Annual Business Survey (ABS), the Nonemployer Statistics by Demographics (NES-D) series, and the Annual Survey of Entrepreneurs (ASE) At a Glance](https://www.census.gov/content/dam/Census/programs-surveys/abs/ABS/pro_data_users.jpg)

3. This human-composed haiku or a bouquet of [artificial intelligence-generated limericks](https://www.gnod.com/search/ai#q=write%20a%20limerick-style%20poem%20about%20the%20chapter_title)

```{r}
# butchers, chandlers, baked
# sea shanty, filial pie
# call your mom and pop
```
~~~



~~~{definitions_block}
## Function Definitions {-}

This survey uses a dual design variance estimation technique described in the [Data Users Guide](https://www2.census.gov/econ/sbo/07/pums/2007_sbo_pums_users_guide.pdf#page=7).  Most users do not need to study these functions carefully.  Define functions specific to only this dataset:

```{r eval = FALSE , results = "hide" }
MIcombine <-
	function( x , adjustment = 1.992065 ){
	
		# pull the structure of a variance-covariance matrix
		variance.shell <- suppressWarnings( vcov( x$var[[1]] ) )
		
		# initiate a function that will overwrite the diagonals.
		diag.replacement <-	
			function( z ){
				diag( variance.shell ) <- coef( z )
				variance.shell
			}
			
		# overwrite all the diagonals in the variance this_design object
		coef.variances <- lapply( x$var , diag.replacement )
	
		# add then divide by ten
		midpoint <- Reduce( '+' , coef.variances ) / 10
	
		# initiate another function that takes some object,
		# subtracts the midpoint, squares it, divides by ninety
		midpoint.var <- function( z ){ 1/10 * ( ( midpoint - z )^2 / 9 ) }
	
		# sum up all the differences into a single object
		variance <- Reduce( '+' , lapply( coef.variances , midpoint.var ) )
		
		# adjust every number with the factor in the user guide
		adj_var <- adjustment * variance

		# construct a result that looks like other MIcombine methods
		rval <-
			list( 
				coefficients = coef( x$coef ) ,
				variance = adj_var
			)
		
		# call it an MIresult class, like other MIcombine results
		class( rval ) <- 'MIresult'
		
		rval
	}



sbo_with <-
	function ( this_design , expr , ... ){
	
		pf <- parent.frame()
		
		expr <- substitute( expr )
		
		expr$design <- as.name(".design")

		# this pulls in means, medians, totals, etc.
		# notice it uses this_design$coef
		results <- eval( expr , list( .design = this_design$coef ) )
		
		# this is used to calculate the variance, adjusted variance, standard error
		# notice it uses the this_design$var object
		variances <- 
			lapply( 
				this_design$var$designs , 
				function( .design ){ 
					eval( expr , list( .design = .design ) , enclos = pf ) 
				} 
			)
		
		# combine both results..
		rval <- list( coef = results , var = variances )
		
		# ..into a brand new object class
		class( rval ) <- 'imputationResultList'
		
		rval
	}




sbo_subset <-
	function( x , ... ){
		
		# subset the survey object
		coef.sub <- subset( x$coef , ... )
		
		# replicate `var.sub` so it's got all the same attributes as `x$var`
		var.sub <- x$var
		
		# but then overwrite the `designs` attribute with a subset
		var.sub$designs <- lapply( x$var$designs , subset , ... )
		
		# now re-create the `sbosvyimputationList` just as before..
		sub.svy <-
			list(
				coef = coef.sub ,
				var = var.sub
			)
		
		# ..and give it the same class
		sub.svy$call <- sys.call(-1)

		sub.svy
	}

sbo_update <-
	function( x , ... ){
		
		# update the survey object that's going to be used for
		# means, medians, totals, etc.
		coef.upd <- update( x$coef , ... )
		
		# replicate `var.upd` so it's got all the same attributes as `x$var`
		var.upd <- x$var
		
		# but then overwrite the `designs` attribute with an update
		var.upd$designs <- lapply( x$var$designs , update , ... )
		
		# now re-create the `sbosvyimputationList` just as before
		upd.svy <-
			list(
				coef = coef.upd ,
				var = var.upd
			)
		
		upd.svy
	}

sbo_degf <- function( x ) degf( x$coef )


```
---
~~~



~~~{download_and_import_block}
Download and import the file containing records for both coefficient estimates and variance estimation:
```{r eval = FALSE , results = "hide" }
library(httr)
library(readr)

tf <- tempfile()

this_url <- "https://www2.census.gov/programs-surveys/sbo/datasets/2007/pums_csv.zip"

GET( this_url , write_disk( tf ) )

chapter_tag_tbl <- read_csv( tf )

chapter_tag_df <- data.frame( chapter_tag_tbl )

names( chapter_tag_df ) <- tolower( names( chapter_tag_df ) )

chapter_tag_df[ , 'one' ] <- 1
```

Calculate the weights used for variance estimation:
```{r eval = FALSE , results = "hide" }
chapter_tag_df[ , 'newwgt' ] <- 10 * chapter_tag_df[ , 'tabwgt' ] * sqrt( 1 - 1 / chapter_tag_df[ , 'tabwgt' ] )
```

Add business ownership percentages for both gender and ethnicity:
```{r eval = FALSE , results = "hide" }
# replace percent missings with zeroes
for( i in 1:4 ) chapter_tag_df[ is.na( chapter_tag_df[ , paste0( 'pct' , i ) ] ) , paste0( 'pct' , i ) ] <- 0

# sum up ownership ethnicity and gender
chapter_tag_df[ , 'hispanic_pct' ] <- chapter_tag_df[ , 'nonhispanic_pct' ] <- 0
chapter_tag_df[ , 'male_pct' ] <- chapter_tag_df[ , 'female_pct' ] <- 0

# loop through the first four owners' ethnicity and sex variables
for( i in 1:4 ) {

	chapter_tag_df[ chapter_tag_df[ , paste0( 'eth' , i ) ] %in% 'H' , 'hispanic_pct' ] <-
		chapter_tag_df[ chapter_tag_df[ , paste0( 'eth' , i ) ] %in% 'H' , 'hispanic_pct' ] +
		chapter_tag_df[ chapter_tag_df[ , paste0( 'eth' , i ) ] %in% 'H' , paste0( 'pct' , i ) ]
		
	chapter_tag_df[ chapter_tag_df[ , paste0( 'eth' , i ) ] %in% 'N' , 'nonhispanic_pct' ] <-
		chapter_tag_df[ chapter_tag_df[ , paste0( 'eth' , i ) ] %in% 'N' , 'nonhispanic_pct' ] +
		chapter_tag_df[ chapter_tag_df[ , paste0( 'eth' , i ) ] %in% 'N' , paste0( 'pct' , i ) ]
		
	chapter_tag_df[ chapter_tag_df[ , paste0( 'sex' , i ) ] %in% 'M' , 'male_pct' ] <-
		chapter_tag_df[ chapter_tag_df[ , paste0( 'sex' , i ) ] %in% 'M' , 'male_pct' ] +
		chapter_tag_df[ chapter_tag_df[ , paste0( 'sex' , i ) ] %in% 'M' , paste0( 'pct' , i ) ]
		
	chapter_tag_df[ chapter_tag_df[ , paste0( 'sex' , i ) ] %in% 'F' , 'female_pct' ] <-
		chapter_tag_df[ chapter_tag_df[ , paste0( 'sex' , i ) ] %in% 'F' , 'female_pct' ] +
		chapter_tag_df[ chapter_tag_df[ , paste0( 'sex' , i ) ] %in% 'F' , paste0( 'pct' , i ) ]
		
}
```
~~~

~~~{analysis_examples_survey_design}

```{r message = FALSE , eval = FALSE }
library(survey)
library(mitools)

# break random groups into ten separate data.frame objects within a list
var_list <- NULL

for( i in 1:10 ) { var_list <- c( var_list , list( subset( chapter_tag_df , rg == i ) ) ) }

sbo_coef <-
	svydesign(
		id = ~ 1 ,
		weight = ~ tabwgt ,
		data = chapter_tag_df
	)

sbo_var <-
	svydesign(
		id = ~ 1 ,
		weight = ~ newwgt ,
		data = imputationList( var_list )
	)

chapter_tag_design <- list( coef = sbo_coef , var = sbo_var )

class( chapter_tag_design ) <- 'sbosvyimputationList'
```
~~~


~~~{variable_recoding_block}
chapter_tag_design <- 
	update( 
		chapter_tag_design , 
		established_before_2000 =
			ifelse( established %in% c( '0' , 'A' ) , NA , as.numeric( established < 4 ) ) ,
			
		healthins =
			factor( healthins , levels = 1:2 ,
				labels = c( "offered health insurance" , "did not offer health insurance" )
			) ,
			
		hispanic_ownership =
			factor(
				ifelse( hispanic_pct == nonhispanic_pct , 2 ,
				ifelse( hispanic_pct > nonhispanic_pct , 1 , 
				ifelse( nonhispanic_pct > hispanic_pct , 3 , NA ) ) ) ,
				levels = 1:3 ,
				labels = c( 'hispanic' , 'equally hisp/non' , 'non-hispanic' )
			) ,
			
		gender_ownership =
			factor(
				ifelse( male_pct == female_pct , 2 ,
				ifelse( male_pct > female_pct , 1 , 
				ifelse( female_pct > male_pct , 3 , NA ) ) ) ,
				levels = 1:3 ,
				labels = c( 'male' , 'equally male/female' , 'female' )
			)
		
	)
~~~

group_by_variable: gender_ownership

categorical_variable: n07_employer
categorical_variable_description: employer or non-employer
categorical_narm: , na.rm = TRUE

linear_variable: receipts_noisy
linear_variable_description: establishment receipts (noisy)

ratio_estimation_numerator: receipts_noisy
ratio_estimation_denominator: employment_noisy

subset_definition: husbwife %in% 1:3
subset_definition_description: jointly owned by husband and wife

binary_variable: established_before_2000
binary_narm: , na.rm = TRUE


~~~{intermission_block}
<center>https://en.wikipedia.org/wiki/Lorem_ipsum</center>
~~~


~~~{replication_example_block}
## Replication Example {-}

This example matches the statistics and relative standard errors from three [Appendix B](https://www2.census.gov/econ/sbo/07/pums/2007_sbo_pums_users_guide.pdf#page=15) columns:


```{r eval = FALSE , results = "hide" }

hispanic_receipts_result <-
	MIcombine( with( sbo_design , 
		svyby( ~ receipts_noisy , ~ hispanic_ownership , svytotal )
	) )

hispanic_payroll_result <-
	MIcombine( with( sbo_design , 
		svyby( ~ payroll_noisy , ~ hispanic_ownership , svytotal )
	) )

hispanic_employment_result <-
	MIcombine( with( sbo_design , 
		svyby( ~ employment_noisy , ~ hispanic_ownership , svytotal )
	) )
```

Estimates at the U.S. Level using the PUMS Tables for:
```{r eval = FALSE , results = "hide" }
stopifnot( round( coef( hispanic_receipts_result )[ 'hispanic' ] , 0 ) == 350763923 )
stopifnot( round( coef( hispanic_receipts_result )[ 'equally hisp/non' ] , 0 ) == 56166354 )
stopifnot( round( coef( hispanic_receipts_result )[ 'non-hispanic' ] , 0 ) == 10540609303 )

stopifnot( round( coef( hispanic_payroll_result )[ 'hispanic' ] , 0 ) == 54367702 )
stopifnot( round( coef( hispanic_payroll_result )[ 'equally hisp/non' ] , 0 ) == 11083148 )
stopifnot( round( coef( hispanic_payroll_result )[ 'non-hispanic' ] , 0 ) == 1875353228 )

stopifnot( round( coef( hispanic_employment_result )[ 'hispanic' ] , 0 ) == 2026406 )
stopifnot( round( coef( hispanic_employment_result )[ 'equally hisp/non' ] , 0 ) == 400152 )
stopifnot( round( coef( hispanic_employment_result )[ 'non-hispanic' ] , 0 ) == 56889606 )
```


Relative Standard Errors of Estimates at the U.S. Level using the PUMS Tables for:
```{r eval = FALSE , results = "hide" }

stopifnot( round( cv( hispanic_receipts_result )[ 'hispanic' ] , 2 ) == 0.02 )
stopifnot( round( cv( hispanic_receipts_result )[ 'equally hisp/non' ] , 2 ) == 0.06 )
stopifnot( round( cv( hispanic_receipts_result )[ 'non-hispanic' ] , 2 ) == 0 )

stopifnot( round( cv( hispanic_payroll_result )[ 'hispanic' ] , 2 ) == 0.01 )
stopifnot( round( cv( hispanic_payroll_result )[ 'equally hisp/non' ] , 2 ) == 0.06 )
stopifnot( round( cv( hispanic_payroll_result )[ 'non-hispanic' ] , 2 ) == 0 )

stopifnot( round( cv( hispanic_employment_result )[ 'hispanic' ] , 2 ) == 0.01 )
stopifnot( round( cv( hispanic_employment_result )[ 'equally hisp/non' ] , 2 ) == 0.05 )
stopifnot( round( cv( hispanic_employment_result )[ 'non-hispanic' ] , 2 ) == 0 )

```

~~~

